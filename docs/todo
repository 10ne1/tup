can we update a server file (like httpd.c) and restart apache? (eg: like incrontab program)

multi-arch - when building a name-list, automatically include files in a separate build/$(ARCH) directory or some such?

import/export vars to file

FD_CLOEXEC flag on file descriptors?

cross compiling

out of tree build

change progress bar: Only print bar on lowest line, then backspace and print command on its own line?

if we do out of tree build, can we have the monitor kill the updater if a file modification is detected? or restart it?

tup build tup

unlinkat(AT_FDCWD) to do the same thing as unlink() (eg: rm -f foo.o in a badly behaving command should cause foo.o to be re-generated)?

recursive grep kills monitor
 - print message when monitor exits?

will cp -Rp olddir newdir break everything if olddir already has a bunch of stuff compiled in it? - try --seriously-overwrite-outputfiles flag again? I forget why I didn't finish that.

instead of keeping both files and commands in delete list, put them in separate lists. Make the command thing just a progress bar.

use temporary table instead of moving all commands to delete in parser? Should be easy to time the difference.

instead of doing delete_name_file() for each entry in delete_list, maybe change the sql to do 'delete from link where from_id in (select id from delete_list)' or some such. Would still need to iterate to actually unlink() files, though.

autoupdate doesn't autoupdate when first starting the monitor if files have changed while tup wasn't watching

vartree isn't created if no variables?

put dirtree in a list for things like tup_db_select_node_by_flags to avoid callback?

don't continue down re-parse tree unless outputs of the dir have changed.

give user an option to kill an autoupdate updater

if monitor restarts, it never detects a waiting 'tup upd' process.

check inputs and outputs even if command fails

inotify out of space - print sensible error and quit?

.gitignore should be re-generated if removed by user?

syntax: color %flags in output

file: 'tcc' [150 in dir 3] - use dirtree?

kill pending jobs outright when using ctrl-c so you don't have to wait? (Or try to hit ctrl-c twice)

monitor rbtree instead of tmplist?

print directories of Tupfiles when parsing fails

ifneq

when you include a generated file, print path relative to command that was executed? eg: foo/bar.c includes ../blah/baz.c, print it out as ../blah/baz.c

'tup g' shows too much info when a directory changes?

access(2) support in ldpreload?

command that reads from stdin?

tup show to list the Tupfile as read in the current dir?

read in +/- in order to add/remove worker threads?

rule without a : should be an error?

reverse of tup g: give it a file, print the dir/command to create it?

non-existent nodes in create_list ?

tup-gcc:
if CONFIG_NON_EXISTENT is used, add it to .tup/db as ~UNSET~?
 - make sure it's culled
 - work if user code does '#define CONFIG_BLAH blah'?
 - namespace CONFIG under @/default, @/newconfig, etc?

autoupdate doesn't do everything in tup_init() - is find_tup_dir() needed? what   about db open?

directly support symlinks in tup? Might make t5037 usable.
 - also t5032 when building in parallel and using the 'ln -sf %f %o' pattern rather than 'rm -f %o; ln -s %f %o'

 Add %1, %2, etc to reference first, second prereq?

sqlite style graphs for parser

gittup try: generated header becomes a regular file (eg: replace a symlinked header with a regular copy) - does this hose someone who clones gittup?

indent dependent dirs while parsing?

symlink becomes normal file retains sym field?
 - ie: foo -> bar; command does: rm foo; touch foo

html:
  proof: no clean target
  graphs
   - re-use tup_dag_*.png and partial_dag_*.png
   - link styles
  when Tupfiles are parsed
  supported tools / how to use things like ar and ln
  files outside of tup are ignored
   - hidden files can be written to for testing (result in warnings)
   - hidden files cannot be read from
  how files are deleted
  how dependencies are described/discovered
  man pages: tup command line, tup_api
  error messages (eg: you get this error message if...)
