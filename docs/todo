can we update a server file (like httpd.c) and restart apache? (eg: like incrontab program)

multi-arch - when building a name-list, automatically include files in a separate build/$(ARCH) directory or some such?

import/export vars to file

cross compiling

out of tree build

change progress bar: Only print bar on lowest line, then backspace and print command on its own line?

if we do out of tree build, can we have the monitor kill the updater if a file modification is detected? or restart it?

have an "include_rules" directive that will include a Rules.tup file in all parent directories? Could be useful for making directory-scoped variables. Also allow doing something like set LINUX_ROOT=. and have it get set to the current directory?

tup build tup

recursive grep kills monitor

will cp -Rp olddir newdir break everything if olddir already has a bunch of stuff compiled in it? - try --seriously-overwrite-outputfiles flag again? I forget why I didn't finish that.

remove dependency on sqlite3 command line

compile on 64-bit

remove tmpdb in favor of just a temporary table?

use temporary table instead of moving all commands to delete in parser? Should be easy to time the difference.

instead of doing delete_name_file() for each entry in delete_list, maybe change the sql to do 'delete from link where from_id in (select id from delete_list)' or some such. Would still need to iterate to actually unlink() files, though.

ifneq

make a t6017 that's not dependent on gcj

somehow graph not empty when I 'varchanged' a bunch of variables with -j2? (not sure which one actually triggered the build :( ), but the build worked next try:
  [########## ] 1124/1129 ( 99%) 45498: OBJCOPY vmlinux.bin
  [########## ] 1125/1129 ( 99%) 45495: ASM header.S

  Error: Graph is not empty after execution.

  real    6m52.091s
  user    7m58.446s
  sys     0m42.199s
  [marf linux-2.6.27]$ tup upd
  Executing Commands
  [   ] 0/3 (  0%) 45888: LD setup.elf
  [=  ] 1/3 ( 33%) 45889: OBJCOPY setup.bin
  [== ] 2/3 ( 66%) 45890: ./build -b setup.bin vmlinux.bin CURRENT > bzImage
  Root device is (8, 3)
  Setup is 11704 bytes (padded to 11776 bytes).
  System is 1830 kB
  CRC b517552e
  [===] 3/3 (100%)
  [marf linux-2.6.27]$

when you include a generated file, print path relative to command that was executed? eg: foo/bar.c includes ../blah/baz.c, print it out as ../blah/baz.c

syntax error if empty line after last rule?

shouldn't see this error if we can't find the file? (it's outside of tup):
[#########  ] 928/1096 ( 84%) 42660: ASM-OFFSET asm-offsets.s
Error finding dir for '../../../../include/../../../drivers/lguest/lg.h' relative to dir 42625

explicitly named file not found in id blah - print subdir!

don't save new command in temp table and compare to old command instead of creating new command and deleting old?

print cwd when running a command (maybe instead of tupid)

multiple files not specified as input dependencies - only print the error once, then multiple files

can't have % flag in a var and then do : |> $(var) |>  ?
 - should it stay this way?

% flag for suffix so I can do CFLAGS_%(suffix) and set CFLAGS_S for assembly flags

takes long time after re-parsing all linux directories (eg: Rules.tup changes)
  - parser fix will change that?

backslashes annoying in sed commands?

plain $ should go through unmodified?

'tup g' shows too much info when a directory changes?

access(2) support in ldpreload?

command that reads from stdin?

tup show to list the Tupfile as read in the current dir?

read in +/- in order to add/remove worker threads?

tup-gcc:
if CONFIG_NON_EXISTENT is used, add it to .tup/db as ~UNSET~?
 - make sure it's culled
 - work if user code does '#define CONFIG_BLAH blah'?
 - namespace CONFIG under @/default, @/newconfig, etc?

hidden file should be ignored if written to by a command

run with sh -e? eg: (echo foo; bork; echo bar) > %o should exit with failure

remove tup_db_set_flags_by_name() in favor of more targetting flag setting?

remove include_root and TUP_TOP so Tupfiles are compositable?
 - may need to provide include_rules directive so this isn't insane

html:
  proof: big-o notation
  proof: no clean target
  when Tupfiles are parsed
  hidden files are ignored
  how files are deleted
  how dependencies are described/discovered
  tup bugs: build in state Q, change A->B, build in state R, change B->A, build must go back to state Q (not some other state S)
  man pages: tup command line, tup_api
  error messages (eg: you get this error message if...)
