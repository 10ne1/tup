can we update a server file (like httpd.c) and restart apache? (eg: like incrontab program)

multi-arch - when building a name-list, automatically include files in a separate build/$(ARCH) directory or some such?

import/export vars to file

cross compiling

out of tree build

change progress bar: Only print bar on lowest line, then backspace and print command on its own line?

if we do out of tree build, can we have the monitor kill the updater if a file modification is detected? or restart it?

have an "include_rules" directive that will include a Rules.tup file in all parent directories? Could be useful for making directory-scoped variables. Also allow doing something like set LINUX_ROOT=. and have it get set to the current directory?

tup build tup

recursive grep kills monitor
 - print message when monitor exits?

will cp -Rp olddir newdir break everything if olddir already has a bunch of stuff compiled in it? - try --seriously-overwrite-outputfiles flag again? I forget why I didn't finish that.

remove tmpdb in favor of just a temporary table?

use temporary table instead of moving all commands to delete in parser? Should be easy to time the difference.

instead of doing delete_name_file() for each entry in delete_list, maybe change the sql to do 'delete from link where from_id in (select id from delete_list)' or some such. Would still need to iterate to actually unlink() files, though.

ifneq

somehow graph not empty when I 'varchanged' a bunch of variables with -j2? (not sure which one actually triggered the build :( ), but the build worked next try:
  [########## ] 1124/1129 ( 99%) 45498: OBJCOPY vmlinux.bin
  [########## ] 1125/1129 ( 99%) 45495: ASM header.S

  Error: Graph is not empty after execution.

  real    6m52.091s
  user    7m58.446s
  sys     0m42.199s
  [marf linux-2.6.27]$ tup upd
  Executing Commands
  [   ] 0/3 (  0%) 45888: LD setup.elf
  [=  ] 1/3 ( 33%) 45889: OBJCOPY setup.bin
  [== ] 2/3 ( 66%) 45890: ./build -b setup.bin vmlinux.bin CURRENT > bzImage
  Root device is (8, 3)
  Setup is 11704 bytes (padded to 11776 bytes).
  System is 1830 kB
  CRC b517552e
  [===] 3/3 (100%)
  [marf linux-2.6.27]$

when you include a generated file, print path relative to command that was executed? eg: foo/bar.c includes ../blah/baz.c, print it out as ../blah/baz.c

explicitly named file not found in id blah - print subdir!

print cwd when running a command (maybe instead of tupid)

can't have % flag in a var and then do : |> $(var) |>  ?
 - should it stay this way?

% flag for suffix so I can do CFLAGS_%(suffix) and set CFLAGS_S for assembly flags

takes long time after re-parsing all linux directories (eg: Rules.tup changes)
  - parser fix will change that?

change @ variables to mimic $() variable syntax?
 - only escape \@(, not just \@

'tup g' shows too much info when a directory changes?

access(2) support in ldpreload?

command that reads from stdin?

tup show to list the Tupfile as read in the current dir?

read in +/- in order to add/remove worker threads?

tup-gcc:
if CONFIG_NON_EXISTENT is used, add it to .tup/db as ~UNSET~?
 - make sure it's culled
 - work if user code does '#define CONFIG_BLAH blah'?
 - namespace CONFIG under @/default, @/newconfig, etc?

remove tup_db_set_flags_by_name() in favor of more targetting flag setting?

remove include_root and TUP_TOP so Tupfiles are compositable?
 - may need to provide include_rules directive so this isn't insane

autoupdate doesn't do everything in tup_init() - is find_tup_dir() needed? what   about db open?

print graph if not empty after execution
 - make it "fatal tup error"?

use single scratch list instead of all the various temporary lists? or at least re-use ones that don't overlap

directly support symlinks in tup? Might make t5037 usable.

move start_server/stop_server outside so its done once per update thread, rather than once per update()?

compile with -DSQLITE_THREADSAFE=0? my locking should be sufficient
 - examine other sqlite flags?

 Add %1, %2, etc to reference first, second prereq?

html:
  update build page where it says SQLite is needed
  proof: big-o notation
  proof: no clean target
  when Tupfiles are parsed
  files outside of tup are ignored
   - hidden files can be written to for testing (result in warnings)
   - hidden files cannot be read from
  how files are deleted
  how dependencies are described/discovered
  tup bugs: build in state Q, change A->B, build in state R, change B->A, build must go back to state Q (not some other state S)
  man pages: tup command line, tup_api
  error messages (eg: you get this error message if...)
