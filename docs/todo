FD_CLOEXEC flag on file descriptors?

can we have the monitor kill the updater if a file modification is detected? or restart it?

unlinkat(AT_FDCWD) to do the same thing as unlink() (eg: rm -f foo.o in a badly behaving command should cause foo.o to be re-generated)?

recursive grep kills monitor
 - print message when monitor exits?

kill monitor if you ctrl-c twice? (maybe SIGHUP?) that way user has to restart it, which should catch any out of place files

will cp -Rp olddir newdir break everything if olddir already has a bunch of stuff compiled in it? - try --seriously-overwrite-outputfiles flag again? I forget why I didn't finish that.

instead of keeping both files and commands in delete list, put them in separate lists. Make the command thing just a progress bar.

autoupdate doesn't autoupdate when first starting the monitor if files have changed while tup wasn't watching

put dirtree in a list for things like tup_db_select_node_by_flags to avoid callback?

don't continue down re-parse tree unless outputs of the dir have changed.

give user an option to kill an autoupdate updater

t5057 - make 'boo' dependency change update file?

check inputs and outputs even if command fails
 - make sure failed output doesn't become white if the command is removed
 - ie: compile foo.c because FOO is y, but it fails, then set FOO to n - foo.o should be removed

.gitignore should be re-generated if removed by user?

'tup todo': check for config update

name_list_entry - pointer to tup_entry?

syntax: color %flags in output

file: 'tcc' [150 in dir 3] - use dirtree?

kill pending jobs outright when using ctrl-c so you don't have to wait? (Or try to hit ctrl-c twice)
 - might have to worry about a file being written, but the notification of it doesn't reach tup

ifneq

when you include a generated file, print path relative to command that was executed? eg: foo/bar.c includes ../blah/baz.c, print it out as ../blah/baz.c

'tup g' shows too much info when a directory changes?

access(2) support in ldpreload?

command that reads from stdin?

tup show to list the Tupfile as read in the current dir?

read in +/- in order to add/remove worker threads?

rule without a : should be an error?

reverse of tup g: give it a file, print the dir/command to create it?

autoupdate doesn't do everything in tup_init() - is find_tup_dir() needed? what   about db open?

directly support symlinks in tup? Might make t5037 usable.
 - also t5032 when building in parallel and using the 'ln -sf %f %o' pattern rather than 'rm -f %o; ln -s %f %o'

 Add %1, %2, etc to reference first, second prereq?

sqlite style graphs for parser

indent dependent dirs while parsing?

html:
  proof: no clean target
  graphs
   - re-use tup_dag_*.png and partial_dag_*.png
   - link styles
  when Tupfiles are parsed
  supported tools / how to use things like ar and ln
  files outside of tup are ignored
   - hidden files can be written to for testing (result in warnings)
   - hidden files cannot be read from
  how files are deleted
  how dependencies are described/discovered
  man pages: tup command line, tup_api
  error messages (eg: you get this error message if...)
