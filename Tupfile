include_rules

LDFLAGS_preload = $(FPIC) $(SHARED) -ldl

ifeq ($(X86_ARCH_SIBLINGS),y)
  LDFLAGS_tup-ldpreload.32.so += $(LDFLAGS_preload) -m32
  LDFLAGS_tup-ldpreload.so += $(LDFLAGS_preload)
  : src/ldpreload/*.64.o |> !ld |> tup-ldpreload.so
  : src/ldpreload/*.32.o |> !ld |> tup-ldpreload.32.so
else
  LDFLAGS_tup-ldpreload.so += $(LDFLAGS_preload)
  : src/ldpreload/*.o |> !ld |> tup-ldpreload.so
endif

client_objs += src/tup/vardict.o
client_objs += src/tup/access_event.o
client_objs += src/tup/flock.o
: $(client_objs) |> !ar |> libtup_client.a
: src/tup/vardict.h |> !cp |> tup_client.h

srcs = src/tup/*.o
srcs += src/tup/monitor/*.o
srcs += src/tup/colors/*.o
srcs += src/linux/*.o
srcs += src/sqlite3/*.o
srcs += src/compat/*.o
: $(srcs) |> !ar |> libtup.a

: src/tup/tup/main.o libtup.a |> ^ LINK tup^ version=`git describe`; echo "const char *tup_version(void) {return \"$version\";}" | gcc -x c -c - -o tup-version.o; $(CC) %f tup-version.o -o tup -lpthread $(LDFLAGS) |> tup tup-version.o
