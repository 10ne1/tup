#! /usr/bin/perl
use strict;

my($cmd, $path);

if($#ARGV < 0) {
	&usage();
}

$cmd = shift;
if($cmd eq "init") {
	my ($x);
	if(-f ".tup/lock") {
		print ".tup repository already exists.\n";
		exit 0;
	}
	if(!-d ".tup") {
		mkdir ".tup" or die "Can't create .tup/";
	}
	if(!-d ".tup/create") {
		mkdir ".tup/create" or die "Can't create .tup/create/";
	}
	if(!-d ".tup/modify") {
		mkdir ".tup/modify" or die "Can't create .tup/modify/";
	}
	if(!-d ".tup/delete") {
		mkdir ".tup/delete" or die "Can't create .tup/delete/";
	}
	if(!-d ".tup/object") {
		mkdir ".tup/object" or die "Can't create .tup/object/";
	}
	for($x=0; $x<256; $x++) {
		my ($str);
		$str = sprintf "%02x", $x;
		if(!-d ".tup/object/$str") {
			mkdir ".tup/object/$str" or die "Can't create .tup/object/$str";
		}
	}
	if(!-f ".tup/lock") {
		open FILE, ">.tup/lock" or die "Can't create .tup/lock";
		close FILE;
	}
	print ".tup repository initialized.\n";
	exit 0;
}

#$path = "";
#while(! -d ".tup/") {
#	my ($n);
#	$n = `pwd`;
#	chomp($n);
#	if($n eq "/") {
#		die ".tup/ not found! Run 'tup init' to create dependency filesystem.\n";
#	}
#	$n =~ s#.*/##;
#	$path = "$n/";
#	chdir "..";
#}

if($cmd eq "startmon") {
	exec("monitor . &");
} elsif($cmd eq "stopmon") {
	exec("killall -9 monitor");
} elsif("update" =~ /^$cmd/ || $cmd eq "tup") {
	exec("updater");
} elsif("graph" =~ /^$cmd/) {
	exec("sha1depgraph.pl @ARGV");
} elsif("config" =~ /^$cmd/ || $cmd eq "cfg") {
	exec("config @ARGV");
} elsif("create" =~ /^$cmd/) {
	my ($hash);
	if($#ARGV < 0) {
		die "Usage: create file [file...]\n";
	}
	$hash = `echo -n $path$ARGV[0] | sha1sum | awk '{print \$1}'`;
	chomp($hash);
	&create($path.$ARGV[0], $hash);
} elsif("touch" =~ /^$cmd/ || "modify" =~ /^$cmd"/) {
	my ($hash, $a, $b);
	if($#ARGV < 0) {
		die "Usage: [touch/modify] file [file...]\n";
	}
	$hash = `echo -n $path$ARGV[0] | sha1sum | awk '{print \$1}'`;
	($a, $b) = $hash =~ /([0-9a-f][0-9a-f])([0-9a-f]+)/;
	chomp($hash);
	if(! -d ".tup/object/$a/$b") {
		&create($path.$ARGV[0], $hash);
	} else {
		system("touch .tup/modify/$hash");
	}
} elsif("delete" =~ /^$cmd/ || $cmd eq "rm") {
	my ($hash);
	if($#ARGV < 0) {
		die "Usage: delete file [file...]\n";
	}
	$hash = `echo -n $path$ARGV[0] | sha1sum | awk '{print \$1}'`;
	chomp($hash);
	system("touch .tup/delete/$hash");
} else {
	print STDERR "Unknown command: $cmd\n";
}

sub usage
{
	print STDERR <<HERE
Usage: tup command [args]
Where command is:
  init		Initialize the tup dependency hierarchy (.tup/etc)
  startmon	Start the file monitor daemon
  stopmon	Stop the file monitor daemon
  update	Update/delete all files that require changes
  graph		Draw a graph of the depfs
  config	Show / modify configuration
  create	Put a file hash in the create/ directory
  touch/modify	Put a file hash in the create/ or modify/ directory, as req'd
  delete/rm	Put a file hash in the delete/ directory
HERE
;
	die;
}

sub create
{
	my ($a, $b);
	($a, $b) = $_[1] =~ /([0-9a-f][0-9a-f])([0-9a-f]+)/;
	mkdir ".tup/object/$a/$b/" or die "Can't make object directory!\n";
	open FILE, ">.tup/object/$a/$b/.name" or die "Can't open name file for write!\n";
	print FILE "$_[0]\n";
	close FILE;
	system("touch .tup/create/$_[1]");
}
